---
// This component handles all tracking scripts with proper consent management
const gaId = import.meta.env.PUBLIC_GA_MEASUREMENT_ID;
const metaPixelId = import.meta.env.PUBLIC_META_PIXEL_ID;
---

{/* Google Analytics with Consent Mode v2 */}
{gaId && (
  <>
    {/* Load gtag.js - Always load for Consent Mode */}
    <script is:inline async src={`https://www.googletagmanager.com/gtag/js?id=${gaId}`}></script>
    
    <script is:inline>
      // Initialize Google Analytics with Consent Mode v2
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        // @ts-ignore
        window.dataLayer.push(arguments);
      }
      // @ts-ignore
      window.gtag = gtag;
      
      // Set default consent state (before consent is determined)
      gtag('consent', 'default', {
        'ad_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied',
        'analytics_storage': 'denied'
      });
      
      // Initialize gtag
      gtag('js', new Date());
      
      // Configure GA4 (this will respect consent mode)
      gtag('config', '${gaId}', {
        anonymize_ip: true,
        cookie_flags: 'SameSite=Strict;Secure',
        cookie_domain: 'auto',
        cookie_expires: 63072000, // 2 years in seconds
        send_page_view: false // We'll send manually after consent
      });
      
      // Function to update consent when user makes a choice
      function updateGAConsent(hasAnalyticsConsent) {
        gtag('consent', 'update', {
          'analytics_storage': hasAnalyticsConsent ? 'granted' : 'denied'
        });
        
        // Send initial page view after consent is granted
        if (hasAnalyticsConsent) {
          gtag('event', 'page_view', {
            page_title: document.title,
            page_location: window.location.href,
            page_path: window.location.pathname
          });
        }
      }
      
      // Make consent update function available globally
      // @ts-ignore
      window.updateGAConsent = updateGAConsent;
    </script>
  </>
)}

{/* Meta Pixel with iOS 14.5+ Compliance and Advanced Tracking */}
{metaPixelId && (
  <script is:inline>
    function initializeMetaPixel() {
      if (typeof window === 'undefined') return;
      
      // Meta Pixel initialization with iOS 14.5+ compliance
      // @ts-ignore
      !function(f,b,e,v,n,t,s)
      {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
      n.callMethod.apply(n,arguments):n.queue.push(arguments)};
      if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
      n.queue=[];t=b.createElement(e);t.async=!0;
      t.src=v;s=b.getElementsByTagName(e)[0];
      s.parentNode.insertBefore(t,s)}(window, document,'script',
      'https://connect.facebook.net/en_US/fbevents.js');
      
      // Initialize with iOS 14.5+ compliance
      // @ts-ignore
      fbq('init', '${metaPixelId}', {
        external_id: null, // Will be set if user provides email/phone
        agent: 'of-tomorrow-pixel', // Custom agent identifier
        debug: window.location.hostname === 'localhost' // Enable debug mode in dev
      });
      
      // Track initial page view
      // @ts-ignore
      fbq('track', 'PageView');
      
      // Set up iOS 14.5+ Conversions API compliance
      setupIOSCompliance();
      
      // Initialize advanced matching if available
      setupAdvancedMatching();
    }
    
    // iOS 14.5+ Compliance Setup
    function setupIOSCompliance() {
      // @ts-ignore
      if (!window.fbq) return;
      
      // Enable automatic advanced matching
      // @ts-ignore
      fbq('set', 'autoConfig', false, '${metaPixelId}');
      
      // Set up CAPI parameters for server-side tracking
      // @ts-ignore
      fbq('dataProcessingOptions', ['LDU'], 0, 0); // Limited Data Use for California users
      
      // Track iOS version and user agent for better attribution
      const userAgent = navigator.userAgent;
      const isIOS = /iPad|iPhone|iPod/.test(userAgent);
      const isSafari = /Safari/.test(userAgent) && !/Chrome/.test(userAgent);
      
      if (isIOS || isSafari) {
        // @ts-ignore
        fbq('set', 'firstPartyData', {
          is_ios: isIOS,
          is_safari: isSafari,
          user_agent: userAgent
        });
      }
    }
    
    // Advanced Matching Setup
    function setupAdvancedMatching() {
      // @ts-ignore
      if (!window.fbq) return;
      
      // Set up automatic advanced matching for better attribution
      // This will automatically hash PII if detected in forms
      // @ts-ignore
      fbq('set', 'automaticMatching', 'true', '${metaPixelId}');
    }
    
    // Enhanced Meta Pixel Event Tracking Functions
    function createMetaPixelTracker() {
      // @ts-ignore
      if (!window.fbq) return {};
      
      return {
        // Track standard events with business-specific parameters
        trackPageView: function(customParams) {
          customParams = customParams || {};
          // @ts-ignore
          fbq('track', 'PageView', {
            content_name: document.title,
            content_category: 'business_website',
            page_type: 'standard',
            ...customParams
          });
        },
        
        // Track lead generation events
        trackLead: function(leadSource, leadValue, customParams) {
          leadSource = leadSource || 'website';
          leadValue = leadValue || 100;
          customParams = customParams || {};
          
          // @ts-ignore
          fbq('track', 'Lead', {
            content_name: 'Business Inquiry',
            content_category: 'lead_generation',
            value: leadValue,
            currency: 'USD',
            source: leadSource,
            ...customParams
          });
          
          // Also track as complete registration for conversion optimization
          // @ts-ignore
          fbq('track', 'CompleteRegistration', {
            content_name: 'Lead Form Completion',
            status: 'completed',
            value: leadValue,
            currency: 'USD'
          });
        },
        
        // Track content views (service pages, case studies, etc.)
        trackViewContent: function(contentType, contentId, contentName, value) {
          value = value || 50;
          
          // @ts-ignore
          fbq('track', 'ViewContent', {
            content_type: contentType,
            content_ids: [contentId],
            content_name: contentName,
            content_category: 'business_service',
            value: value,
            currency: 'USD'
          });
        },
        
        // Track contact form interactions
        trackContact: function(contactMethod, value) {
          contactMethod = contactMethod || 'form';
          value = value || 150;
          
          // @ts-ignore
          fbq('track', 'Contact', {
            content_name: 'Business Contact',
            content_category: 'customer_service',
            method: contactMethod,
            value: value,
            currency: 'USD'
          });
        },
        
        // Track searches on the site
        trackSearch: function(searchTerm, searchCategory) {
          searchCategory = searchCategory || 'site_search';
          
          // @ts-ignore
          fbq('track', 'Search', {
            content_category: searchCategory,
            search_string: searchTerm,
            value: 25,
            currency: 'USD'
          });
        },
        
        // Track high-value actions (schedule consultation, request quote, etc.)
        trackInitiateCheckout: function(checkoutType, value) {
          checkoutType = checkoutType || 'consultation';
          value = value || 500;
          
          // @ts-ignore
          fbq('track', 'InitiateCheckout', {
            content_name: checkoutType,
            content_category: 'business_service',
            num_items: 1,
            value: value,
            currency: 'USD'
          });
        },
        
        // Custom business events for Of Tomorrow
        trackBusinessEvent: function(eventName, params) {
          params = params || {};
          const customEventName = 'OfTomorrow_' + eventName;
          
          // @ts-ignore
          fbq('trackCustom', customEventName, {
            event_category: 'business_action',
            timestamp: new Date().toISOString(),
            page_url: window.location.href,
            ...params
          });
        },
        
        // Track service interest
        trackServiceInterest: function(serviceName, serviceType) {
          serviceType = serviceType || 'unknown';
          
          this.trackViewContent('service', serviceName.toLowerCase().replace(/\s+/g, '_'), serviceName, 75);
          
          // Also track as custom event
          this.trackBusinessEvent('ServiceInterest', {
            service_name: serviceName,
            service_type: serviceType,
            engagement_level: 'interested',
            value: 75,
            currency: 'USD'
          });
        },
        
        // Track CTA clicks
        trackCTAClick: function(ctaText, ctaLocation, ctaType) {
          ctaType = ctaType || 'button';
          
          this.trackBusinessEvent('CTAClick', {
            cta_text: ctaText,
            cta_location: ctaLocation,
            cta_type: ctaType,
            value: 50,
            currency: 'USD'
          });
          
          // High-value CTAs should also trigger InitiateCheckout
          const highValueCTAs = [
            'Start a Conversation',
            'Schedule Consultation',
            'Request Quote',
            'Get Started',
            'Contact Us'
          ];
          
          if (highValueCTAs.includes(ctaText)) {
            this.trackInitiateCheckout('cta_interaction', 200);
          }
        },
        
        // Track file downloads
        trackDownload: function(fileName, fileType) {
          this.trackBusinessEvent('FileDownload', {
            file_name: fileName,
            file_type: fileType,
            value: 30,
            currency: 'USD'
          });
        },
        
        // Track external link clicks
        trackExternalLink: function(linkUrl, linkText) {
          linkText = linkText || '';
          
          this.trackBusinessEvent('ExternalLink', {
            link_url: linkUrl,
            link_text: linkText,
            link_domain: new URL(linkUrl).hostname
          });
        },
        
        // Track video engagement
        trackVideoEngagement: function(videoTitle, engagementType, progress) {
          progress = progress || 0;
          
          this.trackBusinessEvent('VideoEngagement', {
            video_title: videoTitle,
            engagement_type: engagementType, // play, pause, complete, etc.
            progress_percent: progress,
            value: 40,
            currency: 'USD'
          });
        },
        
        // Track scroll milestones
        trackScrollMilestone: function(percentage) {
          if (percentage >= 75) { // Only track significant scroll depth
            this.trackBusinessEvent('ScrollDepth', {
              scroll_percentage: percentage,
              page_title: document.title,
              value: 20,
              currency: 'USD'
            });
          }
        },
        
        // Track user engagement milestones
        trackEngagementMilestone: function(milestone, value) {
          value = value || 30;
          
          this.trackBusinessEvent('EngagementMilestone', {
            milestone: milestone,
            engagement_score: value,
            page_title: document.title,
            value: value,
            currency: 'USD'
          });
        },
        
        // Set user data for advanced matching (GDPR compliant)
        setUserData: function(userData) {
          userData = userData || {};
          
          // @ts-ignore
          if (!window.fbq || !userData) return;
          
          // Only set user data if marketing consent is given
          const consent = getConsent();
          if (!consent || !consent.marketing) return;
          
          // Hash sensitive data on client side before sending
          const hashedData = {};
          
          if (userData.email) {
            hashedData.em = userData.email.toLowerCase().trim();
          }
          
          if (userData.phone) {
            hashedData.ph = userData.phone.replace(/[^\d]/g, '');
          }
          
          if (userData.firstName) {
            hashedData.fn = userData.firstName.toLowerCase().trim();
          }
          
          if (userData.lastName) {
            hashedData.ln = userData.lastName.toLowerCase().trim();
          }
          
          // @ts-ignore
          fbq('set', 'userData', hashedData);
        }
      };
    }
    
    // Add to window for use by consent manager and other scripts
    // @ts-ignore
    window.initializeMetaPixel = initializeMetaPixel;
    // @ts-ignore
    window.createMetaPixelTracker = createMetaPixelTracker;
  </script>
)}

{/* Enhanced Event Tracking Functions - Updated for Meta Pixel Integration */}
<script is:inline>
  // Enhanced event tracking functions with Meta Pixel integration
  function createEventTracker() {
    // Import consent utilities
    function getConsent() {
      if (typeof window === 'undefined') return null;
      
      try {
        const stored = localStorage.getItem('of-tomorrow-cookie-consent');
        if (!stored) return null;
        
        const consent = JSON.parse(stored);
        
        // Check if consent version is current
        if (consent.version !== '1.0') {
          return null;
        }
        
        return consent;
      } catch {
        return null;
      }
    }
    
    function hasConsent(category) {
      const consent = getConsent();
      if (!consent) return false;
      
      return consent[category];
    }
    
    // Initialize Meta Pixel tracker
    // @ts-ignore
    const metaTracker = window.createMetaPixelTracker ? window.createMetaPixelTracker() : {};
    
    // Enhanced Event Tracking Functions
    const tracker = {
      // Track contact form interactions
      trackContactFormStart: function() {
        this.trackEvent('form_start', {
          form_name: 'contact_form',
          engagement_time_msec: 100
        });
        
        // Meta Pixel tracking
        if (metaTracker.trackBusinessEvent) {
          metaTracker.trackBusinessEvent('ContactFormStart', {
            form_name: 'contact_form'
          });
        }
      },
      
      trackContactFormSubmit: function(method) {
        method = method || 'email';
        
        this.trackEvent('form_submit', {
          form_name: 'contact_form',
          method: method
        });
        
        // Track as conversion
        this.trackEvent('generate_lead', {
          currency: 'USD',
          value: 100.00, // Estimated lead value
          source: 'contact_form'
        });
        
        // Meta Pixel lead tracking
        if (metaTracker.trackLead) {
          metaTracker.trackLead('contact_form', 100);
        }
      },
      
      // Track button clicks with enhanced data
      trackButtonClick: function(buttonText, buttonType, location) {
        buttonType = buttonType || 'cta';
        location = location || '';
        
        this.trackEvent('click', {
          button_text: buttonText,
          button_type: buttonType,
          click_location: location,
          engagement_time_msec: 100
        });
        
        // Track high-value CTAs as conversions
        if (['Start a Conversation', 'View Our Work', 'Explore Our Vision'].includes(buttonText)) {
          this.trackEvent('engagement_action', {
            action_type: buttonType,
            value: 50.00,
            currency: 'USD'
          });
        }
        
        // Meta Pixel CTA tracking
        if (metaTracker.trackCTAClick) {
          metaTracker.trackCTAClick(buttonText, location, buttonType);
        }
      },
      
      // Track external link clicks
      trackExternalLink: function(url, linkText) {
        linkText = linkText || '';
        const domain = new URL(url).hostname;
        
        this.trackEvent('click', {
          link_url: url,
          link_domain: domain,
          link_text: linkText,
          outbound: true
        });
        
        // Meta Pixel external link tracking
        if (metaTracker.trackExternalLink) {
          metaTracker.trackExternalLink(url, linkText);
        }
        
        // Special tracking for translations site
        if (domain.includes('translations.oftomorrow.net')) {
          this.trackEvent('visit_translation_site', {
            referrer_page: window.location.pathname,
            engagement_time_msec: 200
          });
        }
      },
      
      // Track scroll depth with Meta Pixel integration
      trackScrollDepth: function(percent) {
        this.trackEvent('scroll', {
          percent_scrolled: percent,
          page_location: window.location.href
        });
        
        // Meta Pixel scroll milestone tracking
        if (metaTracker.trackScrollMilestone) {
          metaTracker.trackScrollMilestone(percent);
        }
      },
      
      // Track file downloads
      trackFileDownload: function(fileName, fileType, fileSize) {
        this.trackEvent('file_download', {
          file_name: fileName,
          file_extension: fileType,
          file_size: fileSize,
          link_url: window.location.href
        });
        
        // Meta Pixel download tracking
        if (metaTracker.trackDownload) {
          metaTracker.trackDownload(fileName, fileType);
        }
      },
      
      // Track service/product interest
      trackServiceInterest: function(serviceName) {
        this.trackEvent('view_item', {
          item_id: serviceName.toLowerCase().replace(/\s+/g, '_'),
          item_name: serviceName,
          item_category: 'service',
          engagement_time_msec: 300
        });
        
        // Meta Pixel service interest tracking
        if (metaTracker.trackServiceInterest) {
          metaTracker.trackServiceInterest(serviceName, 'business_service');
        }
      },
      
      // Track content engagement
      trackContentEngagement: function(contentType, contentId, action) {
        action = action || 'view';
        
        this.trackEvent('content_engagement', {
          content_type: contentType,
          content_id: contentId,
          action: action,
          engagement_time_msec: 200
        });
        
        // Meta Pixel content view tracking
        if (metaTracker.trackViewContent && action === 'view') {
          metaTracker.trackViewContent(contentType, contentId, contentId);
        }
      },
      
      // Track conversions
      trackConversion: function(eventName, value, currency, additionalParams) {
        currency = currency || 'USD';
        additionalParams = additionalParams || {};
        
        this.trackEvent(eventName, {
          value: value,
          currency: currency,
          ...additionalParams
        });
        
        // Meta Pixel conversion tracking based on event type
        if (metaTracker.trackLead && eventName.includes('lead')) {
          metaTracker.trackLead('website', value);
        } else if (metaTracker.trackInitiateCheckout && eventName.includes('checkout')) {
          metaTracker.trackInitiateCheckout('conversion', value);
        }
      },
      
      // Track business events
      trackBusinessEvent: function(eventType, details) {
        details = details || {};
        
        this.trackEvent(eventType, {
          event_category: 'business',
          timestamp: new Date().toISOString(),
          ...details
        });
        
        // Meta Pixel business event tracking
        if (metaTracker.trackBusinessEvent) {
          metaTracker.trackBusinessEvent(eventType, details);
        }
      },
      
      // Track journey milestones
      trackJourneyMilestone: function(milestone, stage, value) {
        value = value || 10;
        
        this.trackEvent('journey_milestone', {
          milestone: milestone,
          journey_stage: stage,
          value: value,
          currency: 'USD'
        });
        
        // Meta Pixel engagement milestone tracking
        if (metaTracker.trackEngagementMilestone) {
          metaTracker.trackEngagementMilestone(milestone, value);
        }
      },
      
      // Core event tracking function
      trackEvent: function(eventName, parameters) {
        parameters = parameters || {};
        const consent = getConsent();
        
        // Enhanced parameters for all events
        const enhancedParams = {
          timestamp: new Date().toISOString(),
          page_title: document.title,
          page_location: window.location.href,
          page_path: window.location.pathname,
          ...parameters
        };
        
        // Track with Google Analytics if analytics consent is given
        // @ts-ignore
        if (consent && consent.analytics && typeof window.gtag === 'function') {
          // @ts-ignore
          window.gtag('event', eventName, enhancedParams);
          
          // Debug logging in development
          if (window.location.hostname === 'localhost') {
            console.log('GA4 Event:', eventName, enhancedParams);
          }
        }
        
        // Track with Meta Pixel if marketing consent is given
        // @ts-ignore
        if (consent && consent.marketing && typeof window.fbq === 'function') {
          // Map GA4 events to Meta Pixel standard events when possible
          const metaEventName = mapToMetaEvent(eventName);
          
          // @ts-ignore
          if (metaEventName.startsWith('Custom_')) {
            // @ts-ignore
            window.fbq('trackCustom', metaEventName, enhancedParams);
          } else {
            // @ts-ignore
            window.fbq('track', metaEventName, enhancedParams);
          }
          
          // Debug logging in development
          if (window.location.hostname === 'localhost') {
            console.log('Meta Pixel Event:', metaEventName, enhancedParams);
          }
        }
      },
      
      // Track page views for SPAs
      trackPageView: function(pagePath) {
        const consent = getConsent();
        const path = pagePath || window.location.pathname;
        
        // @ts-ignore
        if (consent && consent.analytics && typeof window.gtag === 'function') {
          // @ts-ignore
          window.gtag('event', 'page_view', {
            page_title: document.title,
            page_location: window.location.href,
            page_path: path
          });
        }
        
        // @ts-ignore
        if (consent && consent.marketing && metaTracker.trackPageView) {
          metaTracker.trackPageView({
            page_path: path
          });
        }
      }
    };
    
    // Helper function to map GA4 events to Meta Pixel events
    function mapToMetaEvent(ga4Event) {
      const eventMap = {
        'generate_lead': 'Lead',
        'form_submit': 'Contact',
        'view_item': 'ViewContent',
        'click': 'Custom_Click',
        'scroll': 'Custom_Scroll',
        'file_download': 'Custom_Download',
        'content_engagement': 'ViewContent',
        'form_start': 'Custom_FormStart',
        'engagement_action': 'InitiateCheckout',
        'journey_milestone': 'Custom_Milestone',
        'page_view': 'PageView'
      };
      
      return eventMap[ga4Event] || ('Custom_' + ga4Event);
    }
    
    return tracker;
  }
  
  // Initialize global tracking functions
  // @ts-ignore
  window.tracker = createEventTracker();
  
  // Backward compatibility
  // @ts-ignore
  window.trackEvent = window.tracker.trackEvent.bind(window.tracker);
  // @ts-ignore
  window.trackPageView = window.tracker.trackPageView.bind(window.tracker);
</script>

{/* Consent-aware tracking initialization */}
<script is:inline>
  // Initialize tracking based on current consent
  function initializeTrackingScripts() {
    if (typeof window === 'undefined') return;
    
    const consent = getConsent();
    if (!consent) return;
    
    // Update GA4 consent mode
    // @ts-ignore
    if (typeof window.updateGAConsent === 'function') {
      // @ts-ignore
      window.updateGAConsent(consent.analytics);
    }
    
    // Initialize Meta Pixel if marketing consent is given
    // @ts-ignore
    if (consent.marketing && typeof window.initializeMetaPixel === 'function') {
      // @ts-ignore
      window.initializeMetaPixel();
    }
  }
  
  function getConsent() {
    if (typeof window === 'undefined') return null;
    
    try {
      const stored = localStorage.getItem('of-tomorrow-cookie-consent');
      if (!stored) return null;
      
      const consent = JSON.parse(stored);
      
      // Check if consent version is current
      if (consent.version !== '1.0') {
        return null;
      }
      
      return consent;
    } catch {
      return null;
    }
  }
  
  // Initialize on page load
  document.addEventListener('DOMContentLoaded', function() {
    initializeTrackingScripts();
    setupAutomaticTracking();
    setupMetaPixelEnhancements();
  });
  
  // Re-initialize when consent changes
  window.addEventListener('consentUpdate', function(event) {
    const consent = event.detail;
    
    // Update GA4 consent
    // @ts-ignore
    if (typeof window.updateGAConsent === 'function') {
      // @ts-ignore
      window.updateGAConsent(consent && consent.analytics);
    }
    
    // Initialize Meta Pixel if needed
    // @ts-ignore
    if (consent && consent.marketing && typeof window.initializeMetaPixel === 'function') {
      // Check if Meta Pixel is already initialized to avoid double-loading
      // @ts-ignore
      if (!window.fbq) {
        // @ts-ignore
        window.initializeMetaPixel();
      }
    }
  });
  
  // Meta Pixel specific enhancements
  function setupMetaPixelEnhancements() {
    // @ts-ignore
    if (!window.fbq) return;
    
    // Set up automatic form field detection for advanced matching
    document.addEventListener('input', function(event) {
      const target = event.target;
      if (!target || target.tagName !== 'INPUT') return;
      
      const consent = getConsent();
      if (!consent || !consent.marketing) return;
      
      // Detect email inputs and set user data for better matching
      if (target.type === 'email' && target.value.includes('@')) {
        // @ts-ignore
        const metaTracker = window.createMetaPixelTracker ? window.createMetaPixelTracker() : null;
        if (metaTracker && metaTracker.setUserData) {
          metaTracker.setUserData({
            email: target.value
          });
        }
      }
    });
    
    // Track viewport visibility for better attribution
    if ('IntersectionObserver' in window) {
      const observer = new IntersectionObserver(function(entries) {
        entries.forEach(function(entry) {
          if (entry.isIntersecting && entry.intersectionRatio > 0.5) {
            // Track significant content visibility
            // @ts-ignore
            if (window.tracker && window.tracker.trackContentEngagement) {
              const target = entry.target;
              const contentId = target.id || target.className || 'unnamed_content';
              // @ts-ignore
              window.tracker.trackContentEngagement('viewport', contentId, 'visible');
            }
          }
        });
      }, {
        threshold: 0.5,
        rootMargin: '0px'
      });
      
      // Observe main content sections
      const contentSections = document.querySelectorAll('main section, .service-card, .feature-card');
      contentSections.forEach(function(section) {
        observer.observe(section);
      });
    }
  }
  
  // Automatic event tracking setup (enhanced for Meta Pixel)
  function setupAutomaticTracking() {
    // @ts-ignore
    if (!window.tracker) return;
    
    // Track external links automatically
    document.addEventListener('click', function(event) {
      const target = event.target;
      if (!target) return;
      
      const link = target.closest('a');
      if (!link) return;
      
      const href = link.getAttribute('href');
      if (!href) return;
      
      // Check if it's an external link
      if (href.startsWith('http') && !href.includes(window.location.hostname)) {
        const linkText = link.textContent || link.getAttribute('aria-label') || '';
        // @ts-ignore
        window.tracker.trackExternalLink(href, linkText);
      }
    });
    
    // Track button clicks automatically (enhanced for Meta Pixel)
    document.addEventListener('click', function(event) {
      const target = event.target;
      if (!target) return;
      
      const button = target.closest('button');
      if (!button) return;
      
      const buttonText = button.textContent || button.getAttribute('aria-label') || '';
      const buttonType = button.getAttribute('data-track-type') || 'button';
      const location = button.getAttribute('data-track-location') || window.location.pathname;
      
      // @ts-ignore
      window.tracker.trackButtonClick(buttonText, buttonType, location);
    });
    
    // Track scroll depth with enhanced Meta Pixel integration
    let maxScroll = 0;
    const scrollThresholds = [25, 50, 75, 90, 100];
    let trackedThresholds = [];
    
    window.addEventListener('scroll', function() {
      const scrollPercent = Math.round((window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100);
      
      if (scrollPercent > maxScroll) {
        maxScroll = scrollPercent;
        
        for (const threshold of scrollThresholds) {
          if (scrollPercent >= threshold && !trackedThresholds.includes(threshold)) {
            trackedThresholds.push(threshold);
            // @ts-ignore
            window.tracker.trackScrollDepth(threshold);
          }
        }
      }
    });
    
    // Track file downloads
    document.addEventListener('click', function(event) {
      const target = event.target;
      if (!target) return;
      
      const link = target.closest('a');
      if (!link) return;
      
      const href = link.getAttribute('href');
      if (!href) return;
      
      // Check if it's a file download
      const fileExtensions = /\.(pdf|doc|docx|xls|xlsx|ppt|pptx|zip|rar|txt|csv|jpg|png|gif|mp4|mov|avi)$/i;
      if (fileExtensions.test(href)) {
        const fileName = href.split('/').pop() || href;
        const fileType = fileName.split('.').pop() || '';
        // @ts-ignore
        window.tracker.trackFileDownload(fileName, fileType);
      }
    });
    
    // Track form interactions (enhanced for Meta Pixel)
    document.addEventListener('focus', function(event) {
      const target = event.target;
      if (!target) return;
      
      const form = target.closest('form');
      if (!form) return;
      
      const formName = form.id || form.className || 'unnamed_form';
      
      // Track form start on first field focus
      if (!form.hasAttribute('data-form-started')) {
        form.setAttribute('data-form-started', 'true');
        
        if (formName.includes('contact')) {
          // @ts-ignore
          window.tracker.trackContactFormStart();
        } else {
          // @ts-ignore
          window.tracker.trackBusinessEvent('FormStart', {
            form_name: formName
          });
        }
      }
    });
    
    // Enhanced form submission tracking
    document.addEventListener('submit', function(event) {
      const form = event.target;
      if (!form) return;
      
      const formName = form.id || form.className || 'unnamed_form';
      
      if (formName.includes('contact')) {
        // @ts-ignore
        window.tracker.trackContactFormSubmit('form');
      } else {
        // @ts-ignore
        window.tracker.trackBusinessEvent('FormSubmit', {
          form_name: formName,
          value: 100,
          currency: 'USD'
        });
      }
    });
  }
</script>

{/* Meta Pixel noscript fallback - only if marketing consent is given */}
{metaPixelId && (
  <noscript>
    <img 
      height="1" 
      width="1" 
      style="display:none"
      src={`https://www.facebook.com/tr?id=${metaPixelId}&ev=PageView&noscript=1`}
      alt=""
    />
  </noscript>
)}